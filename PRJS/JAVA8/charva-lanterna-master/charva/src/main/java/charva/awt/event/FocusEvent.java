/* class FocusEvent
 *
 * Copyright (C) 2001  R M Pitman
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package charva.awt.event;

import charva.awt.Component;


/**
 * A low-level event that indicates that an object has gained or lost the
 * keyboard focus. This event is generated by a component such as a 
 * text-field. This event is passed to every FocusListener object that is
 * registered to receive such events using the object's addFocusListener()
 * method.
 */
public class FocusEvent extends AWTEvent {
    
    private static final long serialVersionUID = 7044740983354305136L;
    
    public static final int FOCUS_FIRST        = 1004;
    public static final int FOCUS_LAST         = 1005;
    public static final int FOCUS_GAINED       = FOCUS_FIRST;
    public static final int FOCUS_LOST         = 1 + FOCUS_FIRST;
    
    
    private boolean     temporary;
    private Component   opposite;
    
    
    /**
     * Create a new FocusEvent.
     * 
     * @param id     The event identifier. Must be FOCUS_LOST or FOCUS_GAINED.
     * @param source The component to which the event must be delivered.
     */
    public FocusEvent(int id, Component source) {
        super(source, id);
    }

    public FocusEvent(int id, Component source, boolean temporary, 
            Component opposite) {
        
        super(source, id);
        
        this.temporary = temporary;
        this.opposite  = opposite;
    }

    public Component getOppositeComponent() {
       return opposite;
    }

    public boolean isTemporary() {
       return temporary;
    }

    /**
     * Returns a parameter string identifying this event.
     * This method is useful for event-logging and for debugging.
     *
     * @return a string identifying the event and its attributes
     */
    public String paramString() {
        String typeStr;
        switch (id) {
        case FOCUS_GAINED:
            typeStr = "FOCUS_GAINED";
            break;

        case FOCUS_LOST:
            typeStr = "FOCUS_LOST";
            break;

        default:
            typeStr = "unknown type";
        }

        return typeStr + (temporary ? ",temporary" : ",permanent")
                + ",opposite=" + getOppositeComponent();
    }
}
